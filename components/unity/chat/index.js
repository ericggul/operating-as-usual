import * as S from "./styles";
import { useState, useEffect, useRef } from "react";
import { AiOutlineSend } from "react-icons/ai";
import axios from "axios";

const CHAT_DATA = [
  {
    name: "Freya",
    profilePic: "/assets/images/unity/profile_1.jpg",
    time: "15:30",
    message:
      "Hi, I am Freya. I am a student at the University of Toronto. I am looking for a roommate to share a room with me. I am a very clean person and I am looking for someone who is also clean.",
  },
  {
    name: "Carrie",
    profilePic: "/assets/images/unity/profile_2.jpg",
    time: "15:30",
    message: "Hi, I am Carrie. I am a student at the University of Toronto. I am looking for a roommate to share a room with me.",
  },
  {
    name: "Freya",
    profilePic: "/assets/images/unity/profile_1.jpg",
    time: "15:32",
    message: "Sounds good. I am interested in your room. When can we meet up to see the room?",
  },
  {
    name: "Carrie",
    profilePic: "/assets/images/unity/profile_2.jpg",
    time: "15:33",
    message: "By the way, I am a very clean person. I am looking for someone who is also clean. I am looking for someone who is also a student.",
  },
  {
    name: "Freya",
    profilePic: "/assets/images/unity/profile_1.jpg",
    time: "15:34",
    message: "Awesome",
  },
  {
    name: "Freya",
    profilePic: "/assets/images/unity/profile_1.jpg",
    time: "15:35",
    message: "I am free tomorrow at 2pm. How about you?",
  },
  {
    name: "Carrie",
    profilePic: "/assets/images/unity/profile_2.jpg",
    time: "15:36",
    message: "Yes, I am free tomorrow at 2pm. Where should we meet?",
  },
  {
    name: "Freya",
    profilePic: "/assets/images/unity/profile_1.jpg",
    time: "15:37",
    message: "How about the Starbucks at the University of Toronto?",
  },
  {
    name: "Carrie",
    profilePic: "/assets/images/unity/profile_2.jpg",
    time: "15:38",
    message: "Sounds good.",
  },
  {
    name: "Carrie",
    profilePic: "/assets/images/unity/profile_2.jpg",
    time: "15:39",
    message: "See you tomorrow at 2pm.",
  },
];

export default function Component() {
  const [chatData, setChatData] = useState(CHAT_DATA);
  const singleChatRef = useRef(null);

  function handleSendMessage(message) {
    const now = new Date();
    const time = now.getHours() + ":" + now.getMinutes();

    setChatData((chatData) => [
      ...chatData,
      {
        name: "Freya",
        profilePic: "/assets/images/unity/profile_1.jpg",
        time,
        message,
      },
    ]);
  }

  //keep on container ref
  const timeoutRef = useRef();

  useEffect(() => {
    if (!singleChatRef.current) return;
    singleChatRef.current.scrollIntoView({
      behavior: "smooth",
      block: "center",
    });

    //if latest chat generated by freya
    if (chatData[chatData.length - 1].name === "Freya") {
      if (timeoutRef.current) clearTimeout(timeoutRef.current);
      timeoutRef.current = setTimeout(generateChatGPTChat, 1000);

      return () => {
        clearTimeout(timeoutRef.current);
      };
    }
  }, [chatData]);

  async function generateChatGPTChat() {
    let chatElement = chatData.map((chat) => `${chat.name}: ${chat.message}`).join("\n");
    const res = await axios.post("/api/openai/chatgpt", {
      systemContent: "Whatsapp Conversation between Freya(Daughter) and Carrie(Mother), generate Carrie conversation based on Freya's latest reply",
      userContent: chatElement,
    });

    let reply = res.data.text;

    //generate replies, split by ('.'), make sure new sentence ends with ('.')
    let replies = (reply.split("Carrie: ")[1] || reply)
      .split(".")
      .filter((item) => item !== "")
      .map((item) => (["!", "?", "."].includes(item.trim().slice(-1)) ? item.trim() : item.trim() + "."));
    const now = new Date();
    const time = now.getHours() + ":" + now.getMinutes();

    let responses = replies.map((rep) => ({
      name: "Carrie",
      profilePic: "/assets/images/unity/profile_2.jpg",
      time,
      message: rep,
    }));

    //add each respons in 0.5 seconds interval

    for (let i = 0; i < responses.length; i++) {
      await new Promise((resolve) => setTimeout(resolve, 500));
      setChatData((chatData) => [...chatData, responses[i]]);
    }
  }

  //img preload
  useEffect(() => {
    let img = new Image();
    img.src = "/assets/images/unity/profile_1.jpg";
    img = new Image();
    img.src = "/assets/images/unity/profile_2.jpg";
  }, []);

  return (
    <S.Wrapper>
      <S.MobileContainer>
        <S.ChatSector>
          {chatData.map((chat, i) => (
            <SingleChat
              isLeft={chat.name === "Freya" ? true : false}
              chat={chat}
              key={i}
              isFirstChat={i - 1 < 0 || chat.name !== chatData[i - 1]?.name}
              isLastChat={i + 1 > chatData.length || chat.name !== chatData[i + 1]?.name}
              refEl={i === chatData.length - 1 ? singleChatRef : null}
            />
          ))}
        </S.ChatSector>
        <ChatInput sendMessage={handleSendMessage} />
      </S.MobileContainer>
    </S.Wrapper>
  );
}

function SingleChat({ chat, isLeft, isFirstChat, isLastChat, refEl }) {
  return (
    <S.SingleChat ref={refEl} isLeft={isLeft} isFirstChat={isFirstChat} isLastChat={isLastChat}>
      <S.ProfilePic>{isLastChat && <img src={chat.profilePic} />}</S.ProfilePic>
      <S.ChatRight isLeft={isLeft}>
        {isFirstChat && <S.ChatName>{chat.name}</S.ChatName>}
        <S.ChatMessage>{chat.message}</S.ChatMessage>
        {isLastChat && <S.ChatTime isLeft={isLeft}>{chat.time}</S.ChatTime>}
      </S.ChatRight>
    </S.SingleChat>
  );
}

function ChatInput({ sendMessage }) {
  const [message, setMessage] = useState("");

  function handleMessageSend() {
    if (message.length === 0) return;
    sendMessage(message);
    setMessage("");
  }

  return (
    <S.InputWrapper>
      <S.ChatInput type="text" onChange={(e) => setMessage(e.target.value)} value={message}></S.ChatInput>
      <S.SendButton onClick={handleMessageSend}>
        <AiOutlineSend />
      </S.SendButton>
    </S.InputWrapper>
  );
}
